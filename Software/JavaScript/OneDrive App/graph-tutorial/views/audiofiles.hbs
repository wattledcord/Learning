<h1>Audio Files</h1>


<div class="card border-success">
  <div class="card-header bg-transparent border-success" id="currentSong">
    Song Name
  </div>
  <div class="card-body">
    <img width="286px" height="180px" src="./../public/images/musicthumb.svg">
    <h5 class="card-title"></h5>
    <div class="btn-toolbar" role="toolbar">
      <div class="btn-group btn-group-lg">
        <button type="button" class="btn btn-outline-primary" id="prev">
          <span class="fas fa-chevron-left"></span>
        </button>
        <button type="button" class="btn btn-outline-primary" id="play">
          <span class="fas fa-play"></span>
        </button>
        <button type="button" class="btn btn-outline-primary" id="pause">
          <span class="fas fa-pause"></span>
        </button>
        <button type="button" class="btn btn-outline-primary" id="next">
          <span class="fas fa-chevron-right"></span>
        </button>
      </div>
    </div>
  </div>
  <div class="card-footer bg-transparent border-success">
    <div class="progress" style="height:20px;">
      <div id="seekbar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar"
        aria-valuenow="70" aria-valuemin="0" aria-valuemax="100">
      </div>
    </div>
  </div>
</div>
<input type="range"  min="0" max="100" value="15" id="volume">

<audio id="player"></audio><br>
<ul class="list-group"></ul>
{{#each files}}
<li class="list-group-item" name="des" data-url={{this.url}} data-song="{{this.description}}">{{this.description}}</li>
{{/each}}
</ul>



<script>  
  const musicitems = document.querySelectorAll("li[name='des'");
  const audioelemet = document.querySelector('audio');
  const volume=document.getElementById('volume');
  volume.addEventListener('input',()=>{
console.log(volume.value);
  },false);
  musicitems.forEach((item) => { item.addEventListener('click', play) })
  function play() {
    musicitems.forEach((item) => item.classList.remove('active'));
    this.classList.add('active');
    console.log(this.dataset);
    $('#currentSong').text(this.dataset.song);
    audioelemet.setAttribute("src", this.dataset.url);
    audioelemet.play();
  }
  $('#play').on('click', function () {
    if (audioelemet.src)
      document.getElementById('player').play();
    else {
      $('#currentSong').text(musicitems[0].dataset.song);
      audioelemet.setAttribute("src", musicitems[0].dataset.url);
      audioelemet.play();

    }
  });

  $('#pause').on('click', function () {
    document.getElementById('player').pause();
  });
  $('#player').on('timeupdate', function () {
    $('#seekbar').attr("style", `width:${(this.currentTime / this.duration) * 100}%`);
  });
  $('#volume').change(function () {
    var val = ($(this).val() - $(this).attr('min')) / ($(this).attr('max') - $(this).attr('min'));
    
    $(this).css('background-image',
                '-webkit-gradient(linear, left top, right top, '
                + 'color-stop(' + val + ', #94A14E), '
                + 'color-stop(' + val + ', #C5C5C5)'
                + ')'
                );
});
  
</script>